<?php

/**
 *  A HTML Form Processor PHP Class
 *
 *  See the documentation for more info.
 *
 *  Read the LICENSE file, provided with the package, to find out how you can use this PHP script.
 *
 *  If you don't find this file, please write an email to noname at nivelzero dot ro and you will be sent a copy of the license file
 *
 *  For more resources visit {@link http://stefangabos.blogspot.com}
 *
 *  @author     Stefan Gabos <ix@nivelzero.ro>
 *  @version    1.0 BETA 3 (last revision: February 16, 2007)
 *  @copyright  (c) 2006 - 2007 Stefan Gabos
 *  @package    HTMLForm
 *  @example    contactform.php
 *  @example    othercontrols.php
 *  @example    register.php
 *  @example    sendtoafriend.php
 */
 
error_reporting(E_ALL);

class HTMLForm
{

    /**
     *  Template folder to use
     *
     *  Note that this reffers to the general template of the form (the one that is in the /templates folder)
     *
     *  Note that only the folder of the template you wish to use needs to be specified. Inside the folder
     *  you <b>must</b> have the <b>template.xtpl</b> file which will be automatically used
     *
     *  default is "default"
     *
     *  @var   string
     */
    var $template;
     
    /**
     *  Path to Zebra Framework PHP Date Picker class
     *
     *  This property has no default value
     *
     *  @var   string
     */
    var $datePickerPath;
    
    /**
     *  The maximum allowed size for file uploads (in bytes)
     *
     *  Default is 1000000 (1 MB)
     *
     *  @var integer
     */
    var $maxFileSize;

    /**
     *  This array contains all the elements added to the form
     *
     *  @var    array
     *
     *  @access private
     */
    var $controls;

    /**
     *  This array contains all the error messages generated by the form
     *
     *  @var    array
     *
     *  @access private
     */
    var $errors;
    
    /**
     *  Initializes the form
     *
     *  @param  string  $formName       Name of the form
     *
     *  @param  string  $formMethod     (optional)Submission method of the form
     *
     *                                  Possible values are <b>POST</b> an <b>GET</b>
     *
     *                                  Default is <b>POST</b>
     *
     *  @return void
     */
    function HTMLForm($formName, $formMethod = "POST")
    {
    
        // make these variables globals
        // the form's name
        global $HTMLForm_name;
        
        // the form's submission method
        global $HTMLForm_method;

        // default values for the form's properties
        // we do this so that the script will also work in PHP 4
        $this->template = "default";
        $this->datePickerPath = "";
        $this->maxFileSize = "1000000";
        $this->custom = array();
        $this->controls = array();
        $this->user = array();
        $this->errors = array();

        // get the absolute path of the class. any further includes rely on this
        // and (on a windows machine) replace \ with /
        $this->absolutePath = preg_replace("/\\\/", "/", dirname(__FILE__));
        
        // get the relative path of the class. ( by removing $_SERVER["DOCUMENT_ROOT"] from the it)
        // any HTML reference (to scripts, to stylesheets) in the template file should rely on this
        $this->relativePath = preg_replace("/".preg_replace("/\//", "\/", $_SERVER["DOCUMENT_ROOT"])."/i", "", $this->absolutePath);

        // make the form name and submission method available to all the methods of the class
        $HTMLForm_name = $this->formName = $formName;
        $HTMLForm_method = $this->formMethod = strtoupper($formMethod);
        
        // include the class.htmlform_control.php file which contains the HTMLForm_control class which is
        // extended by all of the classes
        require $this->absolutePath."/includes/class.htmlform_control.php";
        
    }
    
    /**
     *  Adds controls to the form
     *
     *  <i>The '&' symbol in the prefix of the method name is there to specifically instruct the method to return a refference!</i>
     *
     *  <code>
     *  /*
     *  notice the use of the "&" symbol -> it's the way we can have a refference to the object in PHP4
     *  {@*}
     *
     *  $obj = & $form->add("text", "control_id", "Default text");
     *
     *  </code>
     *
     *  @param  string  $type   Type of the control to add
     *
     *                          Controls that can be added to the form:
     *
     *                          - - button controls ({@link HTMLForm_button})
     *                          - - checkbox controls ({@link HTMLForm_checkbox})
     *                          - - date controls ({@link HTMLForm_date})
     *                          - - file controls ({@link HTMLForm_file})
     *                          - - hidden controls ({@link HTMLForm_hidden})
     *                          - - image controls ({@link HTMLForm_image})
     *                          - - label controls ({@link HTMLForm_label})
     *                          - - password controls ({@link HTMLForm_password})
     *                          - - radio button controls ({@link HTMLForm_radio})
     *                          - - reset button controls ({@link HTMLForm_reset})
     *                          - - select box controls ({@link HTMLForm_select})
     *                          - - submit button controls ({@link HTMLForm_submit})
     *                          - - text box controls ({@link HTMLForm_text})
     *                          - - textarea controls ({@link HTMLForm_textarea})
     *
     *  @param  mixed   $arguments  A list of arguments as required by the control you are adding.
     *
     *                              Click above on each available control/element to see what arguments it accepts
     *
     *  @return refference  Refference to the newly created object
     */
    function &add($type)
    {

        // class names have the "HTMLForm_" prefix
        $className = "htmlform_".strtolower($type);

        // if control to add is the date control
        if ($className == "htmlform_date") {

            // include the file containing the date picker class
            require_once $this->datePickerPath;

        }

        // include the file of class if not already included
        require_once $this->absolutePath."/includes/class.".$className.".php";
        
        // if included file contains such a class
        if (class_exists($className)) {
        
            // convert arguments passed to the add() method to a string ready to be parsed by eval()
            // notice that first argument is ignored as it reffers to the type of the control to add
            // and we don't have to pass that to the class
            $arguments = $this->getStrArgs(func_get_args(), 1);

            // creates the new object with the given arguments
            eval("\$obj = & new \$className(".$arguments.");");
            
            // if the newly created object is a CAPTCHA control
            if ($className == "htmlform_captcha") {

                // set it's absolutePath property in order for the control
                // to be able to include the captcha.php file
                $obj->relativePath = $this->relativePath;

            }

            // add refference to the newly created object to the end of 'controls' array
            $this->controls[] = &$obj;
            
            // return the identifier to the newly created object
            return $obj;

        }

    }
    
    /**
     *  Adds an user defined variable to be accessible in the form's template file
     *
     *  <i>These variables are available in the form's template in the form {user.<variableName>}</i>
     *
     *  <i>You can also add arrays and access them as {user.<variableName>.<key>}</i>
     *
     *  @param  mixed   $variable       Name of an user defined variable
     *
     *  @param  mixed   $variableName   Name through which the variable will be available in the template file
     *
     *  @return void
     */
    function addVar(&$variable, $variableName)
    {
    
        $this->user[$variableName] = $variable;
    
    }

    /**
     *  Returns a string with comma sepparated values generated from an array returned by func_get_args() function
     *
     *  @param  array   $argumentsArray     An array returned by func_get_args() function
     *
     *  @param  int     $startFrom          (optional) Starting from which item should the arguments be taken into consideration
     *
     *                                      Default is '0', meaning all arguments are taken into consideration. If this shoudl be '1',
     *                                      then the first argument will be skipped, if '2' then the first two arguments will be
     *                                      skipped and so on
     *
     *  @return string a string with comma sepparated values generated from an array returned by func_get_args() function
     *
     *  @access private
     */
    function getStrArgs($argumentsArray = "", $startFrom = 0)
    {
    
        $arguments = "";

        // continue only if $argumentsArray is not empty and is an array
        if ($argumentsArray != "" && is_array($argumentsArray)) {

            // iterates through the arguments, starting from $startFrom
            for ($i = $startFrom; $i < count($argumentsArray); $i++) {

                // and creates the argument list to return
                $arguments .= ($arguments != "" ? "," : "").var_export($argumentsArray[$i], true);

            }

        }
        
        // return the arguments ready to be eval'd
        return $arguments;

    }

    /**
     *  Appends an error message to an error block's error messages
     *
     *  You will need to use this method when you do custom validation in order to be able to send
     *  any error message to one of the form's error blocks
     *
     *  @param  string  $errorBlock     The name of the error block to append the error message to
     *
     *  @param  string  $errorMessage   The error message to append
     *
     */
    function addError($errorBlock, $errorMessage)
    {

        // if error block has no error messages yet
        if (!isset($this->errors[$errorBlock])) {

            // create the error message string for the specific error block
            $this->errors[$errorBlock] = "";

        }
        
        $fullMsg = "<span class='htmlform-error-message'>" . $errorMessage. "</span><br />";
        
        // if the same exact message is not already in the error block
        if (preg_match("/" . preg_replace("/\//", "\\/", preg_quote($fullMsg)) . "/", $this->errors[$errorBlock]) == 0) {
        
            // append the error message to the existing messages
            $this->errors[$errorBlock] .= $fullMsg;
            
        }

    }
    
    /**
     *  Checks if the rules set to the form's controls are obeyed
     *
     *  @return boolean TRUE if every rule was obeyed, FALSE if not
     */
    function validate()
    {
    
        // continue only if form was submitted
        if (eval("return isset(\$_".strtoupper($this->formMethod)."['HTMLForm_formname']);")) {
        
            $formIsValid = true;
        
            // iterate through the controls
            foreach ($this->controls as $controlID => $control) {

                // we use this variable to check one rule at a time.
                // if a rule is not obeyed, no further checks are made
                // so that only one error message per control is displayed at a time
                $valid = true;

                // get some attributes of the control
                $attribute = $control->getAttributes(array("name", "type", "value", "multiple"));

                // if control was submitted and has rules assigned
                if (isset($control->submittedValue) && !empty($control->rules)) {

                    // iterate through rules assigned to the control
                    foreach ($control->rules as $ruleName => $ruleAttributes) {
                    
                        // if rules were obeyed so far
                        if ($valid) {

                            // check the rule's name
                            switch (strtolower($ruleName)) {

                                // if "mandatory"
                                case "mandatory":
                                
                                    // if control is 'select'
                                    if ($attribute["type"] == "select") {

                                        // get the index which when selected indicated that 'nothing is selected'
                                        $notSelectedIndex = array_keys($control->attributes["options"], $control->attributes["options"][0]);
                                        $notSelectedIndex = $notSelectedIndex[0];
                                        
                                    }
                                
                                    // the rule will be considered as not obeyed when
                                    if (

                                        // control is 'password' or 'text' or 'textarea' and the 'value' attribute is empty
                                        (($attribute["type"] == "password" || $attribute["type"] == "text" || $attribute["type"] == "textarea") && $attribute["value"] == "") ||
                                        // control is 'file' and no file specified
                                        ($attribute["type"] == "file" && @$_FILES[$attribute["name"]]["name"] == "") ||
                                        // control is 'checkbox' or 'radio' and the control was not submitted
                                        (($attribute["type"] == "checkbox" || $attribute["type"] == "radio") && !$control->submittedValue) ||
                                        // control is 'select', the 'multiple' attribute is set and control was not submitted
                                        ($attribute["type"] == "select" && isset($attribute["multiple"]) && !$control->submittedValue) ||
                                        // control is 'select', the 'multiple' attribute is not set and the select control's first value is selected
                                        ($attribute["type"] == "select" && !isset($attribute["multiple"]) && strcmp($control->submittedValue, $notSelectedIndex) == 0)

                                    ) {
                                    
                                        // add error message to indicated error block
                                        $this->addError($ruleAttributes[0], $ruleAttributes[1]);
                                        
                                        // mark this control as invalid so that no further checkings are done for it, making sure that only one
                                        // error message is displayed at a time for each erroneous control
                                        $valid = false;

                                    }

                                    break;
                                    
                                // if "minlength"
                                case "minlength":

                                    // the rule will be considered as not obeyed when
                                    if (

                                        (
                                            // control is 'password'
                                            $attribute["type"] == "password" ||
                                            // control is 'text'
                                            $attribute["type"] == "text" ||
                                            // control is 'textarea'
                                            $attribute["type"] == "textarea"
                                        ) &&
                                            // the length of entered value is smaller than required
                                            strlen($attribute["value"]) < $ruleAttributes[0]

                                    ) {

                                        // add error message to indicated error block
                                        $this->addError($ruleAttributes[1], $ruleAttributes[2]);

                                        // mark this control as invalid so that no further checkings are done for it, making sure that only one
                                        // error message is displayed at a time for each erroneous control
                                        $valid = false;

                                    }

                                    break;

                                // if "maxlength"
                                case "maxlength":
                                
                                    // the rule will be considered as not obeyed when
                                    if (

                                        (
                                            // control is 'password'
                                            $attribute["type"] == "password" ||
                                            // control is 'text'
                                            $attribute["type"] == "text" ||
                                            // control is 'textarea'
                                            $attribute["type"] == "textarea"
                                        ) &&
                                            // the length of entered value is greater than required
                                            strlen($attribute["value"]) > $ruleAttributes[0]

                                    ) {

                                        // add error message to indicated error block
                                        $this->addError($ruleAttributes[1], $ruleAttributes[2]);

                                        // mark this control as invalid so that no further checkings are done for it, making sure that only one
                                        // error message is displayed at a time for each erroneous control
                                        $valid = false;

                                    }

                                    break;

                                // if "email"
                                case "email":

                                    if (

                                        (
                                            // control is 'password'
                                            $attribute["type"] == "password" ||
                                            // control is 'text'
                                            $attribute["type"] == "text" ||
                                            // control is 'textarea'
                                            $attribute["type"] == "textarea"
                                        ) &&
                                            // not a valid email address
                                            !preg_match("/^([a-zA-Z0-9_\-\+\~\^\{\}]+[\.]?)+@{1}([a-zA-Z0-9_\-\+\~\^\{\}]+[\.]?)+\.[A-Za-z0-9]{2,}\$/", $attribute["value"])

                                    ) {

                                        // add error message to indicated error block
                                        $this->addError($ruleAttributes[0], $ruleAttributes[1]);

                                        // mark this control as invalid so that no further checkings are done for it, making sure that only one
                                        // error message is displayed at a time for each erroneous control
                                        $valid = false;

                                    }

                                    break;
                                    
                                // if digits only
                                case "digitsonly":
                                
                                    if (

                                        (
                                            // control is 'password'
                                            $attribute["type"] == "password" ||
                                            // control is 'text'
                                            $attribute["type"] == "text" ||
                                            // control is 'textarea'
                                            $attribute["type"] == "textarea" 
                                            
                                        ) &&
                                            // not a number
                                            !preg_match("/^[0-9]*\$/", $attribute["value"])

                                    ) {

                                        // add error message to indicated error block
                                        $this->addError($ruleAttributes[0], $ruleAttributes[1]);

                                        // mark this control as invalid so that no further checkings are done for it, making sure that only one
                                        // error message is displayed at a time for each erroneous control
                                        $valid = false;

                                    }

                                    break;
									// if money only
                                case "money":
                                
                                    if (

                                        (   // control is 'text'
                                            $attribute["type"] == "text" 
                                        ) &&
                                            // not a number
                                            !preg_match("/^[0-9]+(.[0-9]{1,2}|[0-9]*)$/", $attribute["value"])

                                    ) {

                                        // add error message to indicated error block
                                        $this->addError($ruleAttributes[0], $ruleAttributes[1]);

                                        // mark this control as invalid so that no further checkings are done for it, making sure that only one
                                        // error message is displayed at a time for each erroneous control
                                        $valid = false;

                                    }

                                    break;
                             
                                case "compare":
                                
                                    if (

                                        (
                                            // control is 'password'
                                            $attribute["type"] == "password" ||
                                            // control is 'text'
                                            $attribute["type"] == "text" ||
                                            // control is 'textarea'
                                            $attribute["type"] == "textarea"
                                        ) &&
                                            // not a valid email address
                                            eval("return isset(\$_".strtoupper($this->formMethod)."['".$ruleAttributes[0]."']);") &&
                                            $control->submittedValue !=  eval("return \$_".strtoupper($this->formMethod)."['".$ruleAttributes[0]."'];")

                                    ) {
                                    
                                        // add error message to indicated error block
                                        $this->addError($ruleAttributes[1], $ruleAttributes[2]);

                                        // mark this control as invalid so that no further checkings are done for it, making sure that only one
                                        // error message is displayed at a time for each erroneous control
                                        $valid = false;

                                    }

                                    break;
                                    
                                case "captcha":
                                
                                    if (
                                    
                                        (
                                            // control is 'text'
                                            $attribute["type"] == "text"
                                        ) &&
                                            // control's value is not the one showed in the picture
                                            md5(md5(md5($control->submittedValue))) !=  $_COOKIE["captcha"]

                                    ) {

                                        // add error message to indicated error block
                                        $this->addError($ruleAttributes[0], $ruleAttributes[1]);

                                        // mark this control as invalid so that no further checkings are done for it, making sure that only one
                                        // error message is displayed at a time for each erroneous control
                                        $valid = false;

                                    }
                                
                                    break;
                                    
                                case "custom":

                                    // the total number of arguments of the rule
                                    $attributesNr = count($ruleAttributes);

                                    $arguments = var_export($control->submittedValue, true);

                                    // iterates through the arguments, starting from the second one as the first is the custom function's name
                                    // and all the way to count($ruleAttributes) - 2 as the last two arguments are the error block name and
                                    // the error message respectively
                                    for ($i = 1; $i < $attributesNr - 2; $i++) {

                                        // creates the argument list to pass to the custom function
                                        $arguments .= ",".var_export($ruleAttributes[$i], true);

                                    }

                                    // run the custom function
                                    if (!eval("return ".$ruleAttributes[0]."(".$arguments.");")) {

                                        // add error message to indicated error block
                                        $this->addError($ruleAttributes[$attributesNr - 2], $ruleAttributes[$attributesNr - 1]);

                                        // mark this control as invalid so that no further checkings are done for it, making sure that only one
                                        // error message is displayed at a time for each erroneous control
                                        $valid = false;

                                    }

                                    break;

                            }
                            
                        }
                        
                    }
                    
                }

                // set the private 'valid' attribute of the control to whatever valud $valid has
                $control->setAttributes(array("valid"=>$valid));
                
                // if control is not valid
                if (!$valid) {
                
                    // set the form as not being valid
                    $formIsValid = false;

                }
                
                //if
                if (
                
                    // "type" attribute is set
                    isset($attribute["type"]) &&

                    (

                        // type is password
                        $attribute["type"] == "password" ||

                        // type is text and the control has the captcha rule set
                        ($attribute["type"] == "text" && array_key_exists("captcha", $control->rules))

                    )

                ) {

                    // clear the value in the field
                    $control->setAttributes(array("value"=>""));

                }
                
            }
            
            // after iterating through all the controls,
            // check if the form is valid
            if ($formIsValid) {

                // and return true
                return true;

            }
            
        // if form was not submitted
        } else {
        
            // return false
            return false;

        }
        
    }
    
    /**
     *  Renders the form
     *
     *  @param  string  $template   The form template to parse
     *
     *                              <b>Remember not to include <form> or other tags that appear in the general template set by the
     *                              {@link $template} property!</b>
     *
     *  @param  boolean $toVar      (optional) If set to TRUE, the output will be returned instead of being outputted to the screen
     */
    function render($template, $toVar = false)
    {


        // if the xtemplate class is not already included
        if (!class_exists("XTemplate")) {

            // if the file exists
            if (file_exists($this->absolutePath."/includes/class.xtemplate.php")) {

                // include the xtemplate class
                require_once $this->absolutePath."/includes/class.xtemplate.php";

            // if the file does not exists
            } else {

                // save the error level and stop the execution of the script
                $this->error = 0;
                return false;

            }

        }

        // start rendering of the form template
        $xtpl = new XTemplate($template);
        
        // makes user submitted variables available in the template file
        foreach ($this->user as $variableName=>$value) {

            $xtpl->assign($variableName, $value);

        }

        $controls = array();

        // iterate through the controls assigned to the form
        foreach ($this->controls as $control) {

            // read some attributes of the control
            $attributes = $control->getAttributes("id");
            
            // add generated HTML code to the $controls array
            $controls[$attributes["id"]] = $control->toHTML();
            
        }
        
        // assign controls
        $xtpl->assign("controls", $controls);
        
        // if there are any error messages
        if (!empty($this->errors)) {
        
            // assign error messages
            $xtpl->assign("errors", $this->errors);
            
            // iterate through error message blocks
            foreach (array_keys($this->errors) as $errorBlock) {
            
                // and parse them
                $xtpl->parse("main.".$errorBlock);
            
            }
        }

        // parse the form template
        $xtpl->parse("main");

        // and store the result in the $html variable
        $html = $xtpl->text("main");

        // start rendering of the main template file
        $xtpl->restart($this->absolutePath."/templates/default/template.xtpl");
        
        // assign some variables used in the main template
        $xtpl->assign("formName", $this->formName);
        $xtpl->assign("formMethod", $this->formMethod);
        $xtpl->assign("templatePath", $this->relativePath."/templates/".$this->template);

        // finally assign the content resulted from parsing the form template
        $xtpl->assign("content", $html);
        
        // if form contains at least one file control
        if (in_array("HTMLForm_file", get_declared_classes())) {

            // assign the maxFileSize property
            $xtpl->assign("maxFileSize", $this->maxFileSize);
            
            // parse the MAX_FILE_SIZE hidden field
            $xtpl->parse("main.file_upload");
            
            // parse encoding type
            $xtpl->parse("main.enctype");

        }
        
        // parse the main template
        $xtpl->parse("main");
        
        // and store the result in the $html variable
        $html = $xtpl->text("main");
        
        // if $toVar argument was TRUE
        if ($toVar) {

            // return the result
            return $html;

        // if $toVar argument was FALSE
        } else {

            // output the content
            echo $html;

        }

    }
    
}

?>
